variable "vpc_id" {}
variable "subnet_id" {}

module "ec2_instance" {
  source = "github.com/your_username/terraform-ec2-instance"

  ami = "ami-564546645"
  instance_type = "t2.micro"
  subnet_id = var.subnet_id
  vpc_security_group_ids = [module.ec2_instance_security_group.this_security_group_id]
}

module "ec2_instance_security_group" {
  source = "github.com/your_username/terraform-ec2-instance-security-group"

  vpc_id = var.vpc_id
}





#1. The terraform script to create a
#VPC/VNET
#To Create a VPC/VNET in AWS :
"aws_vpc" "tera_vpc" 
{ cidr_block = "192.168.0.0/24" 
enable_dns_support = true
 enable_dns_hostnames = true 
tags = { Name = "tera_vpc" }
}

#Create one private subnet & public subnet
# PRIVATE SUBNET


resource "aws_subnet" "teraprivate_subnet" {
vpc_id = aws_vpc.vpc.id
count = length(var.teraprivate_subnets_cidr)
cidr_block = element(var.teraprivate_subnets_cidr, count.index)
availability_zone = element(var.availability_zones, count.index)
map_public_ip_on_launch = false
tags = {
Name = "${var.envn}-${element(var.availability_zones, count.index)}-private-subnet"
Environment = "${var.env}"
}
}

# PUBLIC SUBNET

resource "aws_subnet" "terapublic_subnet" {
vpc_id = aws_vpc.vpc.id
count = length(var.terapublic_subnets_cidr)
cidr_block = element(var.terapublic_subnets_cidr, count.index)
availability_zone = element(var.availability_zones, count.index)
map_public_ip_on_launch = true
tags = {Name = "${var.environ}-${element(var.availability_zones, count.index)}-public-subnet"
Environment = "${var.environ}"}}


# Deploy Cloud NAT and enable NATing for Private subnet 

resource "aws_nat_gateway" "nat"
 { allocation_id = aws_eip.nat.id 
subnet_id = aws_subnet.private_subnet.id }

# Deploy Virtual machine on Private Subnet and check the internet access 

resource "aws_nat_gatew" "nat"
 { allocation_id = aws_eip.nat.id 
subnet_id = aws_terasubnet.private_subnet.id }

# Deploy Virtual machine on Private Subnet and check the internet access 
resource "aws_nat_gatew" "nat"
 { allocation_id = aws_eip.nat.id 
subnet_id = aws_terasubnet.private_subnet.id }

# Go to VM in Private Subnet and Check what is my IP, it should display NAT Public IP

resource "aws_subnet" "private_subnet" 
{ vpc_id = aws_vpc.my_vpc.id
 cidr_block = "10.0.1.0/24" }

connection 
{ type = "ssh"
 user = "linux"
 private_key = file("~/.ssh/id_rsa")
 host = aws_instance.vm.private_ip }


